const cors = require('cors');
const express = require('express');
const expressRouter = require('express').Router;
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const errors = require('../../utils').errors;
const xmlparser = require('express-xml-bodyparser');
const Service = require('../service');
const utils = require('../../utils');

class RestAPI extends Service {

  async init(config, services) {
    await super.init(config, services);
    this.config.url = `${this.config.protocol}${this.config.host}${this.config.port ? ':' + this.config.port : ''}`;
    this.spec = await this.services.getSpec();
    this.access = await this.services.getAccess();
    this.logs = await this.services.getLogs();
    this.app = null;
    return this;
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ - –∑–∞–ø—É—Å–∫ RestAPI —Å–µ—Ä–≤–µ—Ä–∞
   * @param params {Object} –ö–æ–ª–±—ç–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é middleware –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö
   * @returns {Promise<Express>}
   */
  async start(params = {
    atFirst: null,
    atEnd: null,
    atError: null,
    atRequest: null,
    atResponse: null
  }) {
    const app = await this.getApp(params);
    await new Promise((resolve) => {
      app.listen(this.config.port, this.config.host, function () {
        resolve();
      });
    });
    this.logStart(app);
    return app;
  }

  /**
   * –í—ã–≤–æ–¥ –ª–æ–≥–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
   * @param app
   */
  logStart(app) {
    console.log(`REST API: ${this.config.url}${this.config.path}`);
  }

  /**
   * Experss –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
   * @param params {Object} –ö–æ–ª–±—ç–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é middleware –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö
   * @returns {Promise<Express>}
   */
  async getApp(params = {
    atFirst: null,
    atEnd: null,
    atError: null,
    atRequest: null,
    atResponse: null
  }) {
    if (this.app) {
      return this.app;
    }
    this.app = express();
    if (params.atFirst) {
      await params.atFirst(this.app);
    }
    this.app.use(cookieParser());
    this.app.use(bodyParser.json());
    this.app.use(xmlparser());
    this.app.use(bodyParser.urlencoded({extended: true}));
    this.app.use(express.static('public'));
    this.app.use(this.config.path, await this.getRouter({
      pathUrl: this.config.path,
      routers: this.config.routers,
      atRequest: params.atRequest,
      atResponse: params.atResponse,
    }));
    if (params.atEnd) {
      await params.atEnd(this.app);
    }
    this.app.use(this.errorHandler({atError: params.atError}));
    return this.app;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
   * @returns {Promise.<*>}
   */
  async getRouter({pathUrl, routers, atRequest, atResponse}) {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    const router = expressRouter();
    const methods = ['get', 'post', 'put', 'delete', 'options', 'patch', 'head'];
    router.origin = {};
    for (let method of methods) {
      router.origin[method] = router[method].bind(router);
      router[method] = (path, def, fun) => {
        if (typeof def === 'function') {
          fun = def;
        } else {
          if (def && def.action && !def.operationId){
            def.operationId = def.action;
          }
          // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
          if (def && !def.hidden) {
            // –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è?
            if (def.operationId) {
              if (!def.action) def.action = def.operationId; // operationId –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ emoji –ø—Ä–æ –¥–æ—Å—Ç—É–ø –≤ ui
              // –£–∑–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
              const aclList = this.access.findAclItemsByAction(def.action);
              // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–≤–∞–≥–≥–µ—Ä–∞
              if (aclList.length === 0) {
                // –í–æ–æ–±—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º!
                def.summary = `${def.summary || ''} ‚õîÔ∏è`;
              } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –≤–æ–æ–±—â–µ
                let needAuth = false;
                let canPublic = false;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ —Å–µ—Å—Å–∏—é.
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è –≤ 'session' - —Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                // –ï—Å–ª–∏ –ø–æ–ª–µ–π –Ω–µ—Ç –≤ 'session' - —Ç–æ –≤–æ–∑–º–æ–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                for (const acl of aclList) {
                  if (acl.session && Object.keys(acl.session).length) {
                    // –ï—Å—Ç—å —É—Å–ª–æ–≤–∏–µ –Ω–∞ —Å–µ—Å—Å–∏—é
                    // @todo –ü–æ–ª—è –≤ session –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    needAuth = true;
                  } else {
                    canPublic = true;
                  }
                }
                if (needAuth) {
                  // –í–æ–∑–º–æ–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                  if (!def.security) {
                    def.security = this.config.defaultSecurity;
                  }
                }
                if (canPublic) {
                  // –í–æ–∑–º–æ–∂–µ–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                  def.summary = `${def.summary || ''} üëÄ`;
                }
              }
            }
            const pathEscape = this.getSpecPath('paths', def.path || path, method);
            this.spec.set(pathEscape, def);
          } else {
            def = {};
          }
        }
        router.origin[method](path, this.responseHandler(fun, def, atRequest, atResponse));
      };
    }
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä–æ—Å—Å–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (this.config.cors.active) {
      router.use(cors(this.config.cors));
    }

    if (!this.spec.get('servers') || !this.spec.get('servers').length) {
      this.spec.set('servers', [{url: `${pathUrl}`, description: ''}]);
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∫ —Ä–æ—É—Ç–µ—Ä—É
    const routersKeys = Object.keys(routers);
    for (const key of routersKeys) {
      await routers[key](router, this.services, {base: this.config.url, path: this.config.path});
    }
    return router;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–æ—É—Ç, –µ—Å–ª–∏ –≤ –Ω–µ–º —É–∫–∞–∑–∞–Ω action (operationId)
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞ –≤ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞ {result, errors}
   * @param callback
   * @param def
   * @param atRequest
   * @param atResponse
   * @returns {(function(req, res, next): Promise<void>)}
   */
  responseHandler(callback, def, atRequest, atResponse) {
    return async (req, res, next) => {
      req.def = def;
      req.action = def.action;
      if (atRequest) {
        await atRequest(req, res, next);
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ
      if (def.action) {
        const details = {};
        const isAllow = this.access.isAllow({action: def.action, session: req.session, details});
        if (!isAllow){
          if (details.key === null){
            // –ù–µ –Ω–∞–π–¥–µ–Ω—ã acl –¥–ª—è —Å–µ—Å—Å–∏–∏, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞
            next(new errors.Unauthorized(details));
          } else {
            // –ó–∞–ø—Ä–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞
            next(new errors.Forbidden(details));
          }
          return;
        }
      }

      try {
        let isSendStatus = false;
        res.originStatus = res.status;
        res.status = status => {
          res.originStatus(status);
          isSendStatus = true;
          return res;
        };
        let result = await callback(req, res, next);
        // –ï—Å–ª–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ —Å–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞, —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å undefined
        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ JSON
        if (typeof result !== 'undefined') {
          // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
          if (!isSendStatus) {
            res.status(res.statusCode || 200);
          }
          // –ú–∞—Å—Å–∏–≤ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–æ items
          // –õ—é–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–æ result, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          if (Array.isArray(result)) {
            result = {result: {items: result}};
          } else {
            result = {result};
          }
          if (atResponse) {
            atResponse(result, req, res, next);
          }
          if (!req.stopLoadByFields && !res.stopLoadByFields) {
            result.result = await utils.query.loadByFields({
              object: result.result,
              fields: req.query.fields || '*',
              action: req.action
            });
          }
          res.json(result);
        }
      } catch (e) {
        next(e);
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–æ—É—Ç–µ—Ä–∞
   * @returns {function(err, req, res, next)}
   */
  errorHandler({atError}) {
    return async (err, req, res, next) => { // eslint-disable-line no-unused-vars
      this.logs.error({error: err, session: req.session})
      let result = {error: this.errorTrnasform(err)};
      res.status(parseInt(result.error.status || 500)).json(result);
      if (atError) {
        atError(result, err, req, res, next);
      }
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   * @param error {Error|*}
   * @returns {Object}
   */
  errorTrnasform(error) {
    if (typeof error.toJSON === 'function') {
      return error.toJSON();
    } else if (error instanceof SyntaxError) {
      return {
        id: 400.003,
        code: error.name,
        message: error.message,
        data: {},
      };
    } else if (error instanceof Error) {
      return {
        id: 500,
        code: error.name,
        message: error.message,
        data: {},
      };
    }
    return {
      id: 500.000,
      code: 'Unknown error',
      message: JSON.stringify(error),
    };
  }

  /**
   * –ü—É—Ç—å –Ω–∞ —Ä–æ—É—Ç–µ—Ä–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @param names –§—Ä–∞–≥–º–µ–Ω—Ç—ã –ø—É—Ç–∏
   * @returns {string}
   */
  getSpecPath(...names) {
    if (names.length === 1 && Array.isArray(names[0])) {
      names = names[0];
    }
    let result = names.map(item => {
      if (item instanceof RegExp) {
        item = item.toString();
      }
      if (typeof item === 'string') {
        item = item.replace(/\//g, '\\')
      }
      return item;
    }).join('/');
    result = '#/' + result.replace(/:([a-z0-9]+)/gi, '{$1}');
    return result;
  }

  /**
   * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   * @see https://www.npmjs.com/package/supertest
   * @param params
   * @returns {Promise<Test>}
   */
  async supertest(params) {
    if (!this._supertestInstance) {
      this._supertestInstance = require('supertest')(await this.getApp(params));
    }
    return this._supertestInstance;
  }
}

module.exports = RestAPI;
